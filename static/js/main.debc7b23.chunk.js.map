{"version":3,"sources":["pages/SearchPage/SearchPage.jsx","lib/api/apiBase.js","lib/api/getMovies.js","context/movieContext.js","components/MovieTile/MovieTile.jsx","components/BackButton/BackButton.jsx","components/PageHeader/PageHeader.js","components/Loader/Loader.jsx","pages/MovieList/MovieList.jsx","pages/Movie/Movie.jsx","pages/NotFound/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchPage","history","useHistory","useState","keyword","setKeyword","year","setYear","error","setError","submition","e","preventDefault","length","url","toLowerCase","push","className","onSubmit","form","name","data-testid","type","placeholder","required","value","onChange","target","onClick","role","http","axios","create","baseURL","interceptors","request","use","config","params","apikey","getMovies","movieTitle","get","s","y","getMovie","movieId","i","MovieContext","React","createContext","movies","details","updateDetails","updateMovies","MovieProvider","Provider","MovieTile","imdbID","Title","Poster","Year","src","onError","onerror","alt","BackButton","path","sameDomain","setSameDomain","useEffect","refererHost","document","referrer","URL","hostname","currentHost","window","location","goBack","PageHeader","title","customClassName","Loader","MovieList","useContext","loader","setLoader","useParams","results","setResults","titleKey","checkIfExist","useCallback","a","data","searchResult","Search","filter","el","Type","newMovie","map","key","Movie","movieDescription","setMovieDescription","movieError","setMovieError","fetchDetails","Error","newDetails","Director","Actors","Awards","Country","Genre","imdbRating","Runtime","Plot","NotFound","App","setMovies","setDetails","exact","Boolean","match","ReactDOM","render","StrictMode","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.debc7b23.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {useHistory} from \"react-router\";\nimport './SearchPage.scss';\n\nconst SearchPage = () => {\n  const history = useHistory();\n  const [keyword, setKeyword] = useState('');\n  const [year, setYear] = useState('');\n  const [error, setError] = useState(null)\n  const updateSearch = (e) => {\n    setKeyword(e.target.value);\n  }\n  const updateYear = (e) => {\n    setYear(e.target.value);\n  }\n  const submition = (e) => {\n    e.preventDefault();\n    if (keyword.length) {\n      let url = `/movie-list/${keyword.toLowerCase()}`\n      if (year.length) url += `/${year}`;\n      history.push(url);\n      setError(null);\n    } else {\n      setError('Movie Title Field is required')\n    }\n\n  }\n  return <section className=\"container dark-background search-page h-50\">\n    <header className=\"search-page-header\">\n      <h1>Movie Search App</h1>\n    </header>\n    <main className=\"search-page-content\">\n      <form className=\"form-inline d-flex flex-column flex-md-row\" onSubmit={submition}>\n        <div className=\"form-group mx-sm-3 mb-2\">\n          <label form=\"movieTitle\" className=\"sr-only\">Movie title</label>\n          <input className=\"form-control\" name=\"movieTitle\" data-testid=\"movieTitle\" type=\"text\"\n                 placeholder='Movie Title' required={true} value={keyword} onChange={updateSearch}/>\n        </div>\n        <div className=\"form-group mx-sm-3 mb-2\">\n          <label form=\"year\" className=\"sr-only\">Production Year</label>\n          <input className=\"form-control\" placeholder='Production Year' data-testid=\"year\" name=\"year\" type=\"text\"\n                 value={year} onChange={updateYear}/>\n        </div>\n        <button className=\"btn btn-primary mb-2\" data-testid=\"search-button\" onClick={submition}> Search</button>\n      </form>\n      {error && <div data-testid=\"validation-error\" className=\"alert alert-danger\" role=\"alert\">\n        {error}\n      </div>}\n\n    </main>\n  </section>\n\n\n}\n\n\nexport default SearchPage;","import axios from 'axios';\n\nconst baseURL = 'https://www.omdbapi.com/';\nconst apiKey = '157f34ed';\n\nconst http = axios.create({\n  baseURL,\n})\n\nhttp.interceptors.request.use(config => {\n  config.params = {\n    apikey: apiKey,\n    type: ['movie', 'series', 'episode'],\n    ...config.params,\n  };\n  return config;\n});\n\n\nexport {http}","import {http} from './apiBase';\n\nconst getMovies = (movieTitle, year = '') => http.get('', {\n  params: {\n    s: movieTitle,\n    y: year\n  }\n});\n\nconst getMovie = (movieId) => http.get('', {\n  params: {\n    i: movieId,\n  }\n});\n\n\nexport {getMovie, getMovies}","import React from \"react\";\n\nconst MovieContext = React.createContext({\n  movies: {},\n  details: {},\n  updateDetails: () => {\n  },\n  updateMovies: () => {\n  }\n});\n\nexport const MovieProvider = MovieContext.Provider;\n\nexport default MovieContext;","import React from \"react\";\nimport {useHistory} from \"react-router\";\nimport \"./MovieTile.scss\";\n\n\nconst MovieTile = ({imdbID, Title, Poster, Year}) => {\n  const history = useHistory();\n  const showDetails = () => {\n    history.push(`/movie/${imdbID}`);\n  }\n  return <div className=\"col-12 movie-tile dark-background\">\n    <img className=\"movie-tile-poster\" src={Poster} onError={(e)=>{e.target.onerror = null; e.target.src=\"http://via.placeholder.com/300x450\"}}\n         alt={Title}/>\n    <section className=\"movie-tile-description\">\n      <h3>{Title} / {Year}</h3>\n      <button className='btn btn-primary' data-testid=\"read-more\" onClick={showDetails}>Read More</button>\n    </section>\n\n\n  </div>\n}\n\nexport default MovieTile;","import React, {useState, useEffect} from \"react\";\nimport {useHistory} from \"react-router\";\n\n\nconst BackButton = ({path}) => {\n  const history = useHistory();\n  const [sameDomain, setSameDomain] = useState(true)\n\n  const goBack = () => {\n    if(path) {\n      history.push(path);\n    } else {\n      sameDomain ? history.goBack() : history.push('/');\n    }\n\n  }\n\n  useEffect(() => {\n    const refererHost = document.referrer.length ? new URL(document.referrer).hostname : ''\n    const currentHost = window.location.hostname;\n    if (refererHost.length && refererHost !== currentHost) setSameDomain(false);\n  }, [])\n  return <button type=\"button\" className=\"btn btn-primary\" onClick={goBack}>\n    Back\n  </button>\n}\n\nexport default BackButton;","import React from \"react\";\nimport BackButton from \"../BackButton/BackButton\";\n\nimport './PageHeadr.scss';\n\nconst PageHeader = ({title, customClassName}) => {\n  return <header className={`page-header ${customClassName}`}>\n    <BackButton/>\n    <h1>{title}</h1>\n  </header>\n}\n\nexport default PageHeader;","import React from \"react\";\n\n\nconst Loader = () => <div className=\"spinner-border text-light text-center\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</div>\n\nexport default Loader","import React, {useCallback, useContext, useEffect, useState} from 'react';\nimport {getMovies} from \"../../lib/api/getMovies\";\nimport {useHistory} from \"react-router\";\nimport MovieContext from \"../../context/movieContext\";\nimport {useParams} from \"react-router\";\nimport MovieTile from \"../../components/MovieTile/MovieTile\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\nimport Loader from \"../../components/Loader/Loader\";\n\n\nconst MovieList = () => {\n    const {movies, updateMovies} = useContext(MovieContext);\n    const [loader, setLoader] = useState(false);\n    const history = useHistory();\n    const {title, year} = useParams();\n    const [results, setResults] = useState([]);\n    let titleKey = year ? `${title}/${year}` : title;\n\n    const checkIfExist = useCallback(async (title, titleKey, year) => {\n        if (movies[titleKey]){\n            setResults(movies[titleKey])\n        } else {\n            try {\n                setLoader(true);\n                const {data} = await getMovies(title, year);\n                const searchResult = data.Search.filter(el => el.Type !== 'game');\n                setLoader(false);\n                setResults(searchResult)\n                const newMovie = {...movies};\n                newMovie[titleKey] = searchResult;\n                updateMovies(newMovie)\n            } catch(err){\n                history.push('/notFound')\n            }\n        }\n    }, [updateMovies, movies, history, setLoader])\n\n  useEffect(() => {\n    checkIfExist(title, titleKey, year)\n  }, [title, titleKey, year, checkIfExist])\n\n    return <section className='container list-page'>\n        <div className=\"row justify-content-center align-content-center\">\n            <PageHeader customClassName={\"dark-background col-12\"} title={`You searched ${title}`}/>\n            {loader ? <Loader/> :\n              (results && results.map(el => <MovieTile key={el.imdbID} {...el}/>))\n            }\n        </div>\n\n    </section>\n}\n\nexport default MovieList;","import React, {useContext, useEffect, useState, useCallback} from 'react';\nimport MovieContext from \"../../context/movieContext\";\nimport {getMovie} from \"../../lib/api/getMovies\";\nimport {useParams} from \"react-router\";\nimport {useHistory} from \"react-router\";\n\nimport './Movie.scss';\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst Movie = () => {\n  const history = useHistory();\n  const {details, updateDetails} = useContext(MovieContext);\n  const [loader, setLoader] = useState(false);\n  const {movieId} = useParams();\n  const [movieDescription, setMovieDescription] = useState({});\n  const [movieError, setMovieError] = useState(null);\n  const fetchDetails = useCallback(async () => {\n    try {\n      setLoader(true)\n      const {data} = await getMovie(movieId);\n      if (data.Error) {\n        setMovieError('we are unable to find more information')\n      } else {\n        const newDetails = {...details};\n        newDetails[movieId] = data;\n        updateDetails(newDetails);\n        setMovieDescription(data);\n      }\n      setLoader(false)\n    } catch (err) {\n      history.push('/notFound');\n    }\n\n  }, [movieId, details, updateDetails, history, setLoader]);\n\n\n  useEffect(() => {\n    if (details[movieId]) {\n      setMovieDescription(details[movieId]);\n    } else {\n      fetchDetails();\n    }\n  }, [fetchDetails, movieId, details])\n\n  return <article className=\"container movie-page\">\n    {\n      loader ? <Loader/>\n      : <section className=\"row\">\n        <PageHeader customClassName={\"col-12 movie-page-header dark-background\"}\n                    title={!movieError ? movieDescription.Title : movieError}/>\n        {!movieError && <section className=\"col-12 movie-page-content dark-background \">\n          <img className=\"movie-page-poster\"\n               onError={(e)=>{e.target.onerror = null; e.target.src=\"http://via.placeholder.com/300x450\"}}\n               src={movieDescription.Poster}\n               alt={movieDescription.Title}/>\n          <main className=\"movie-page-description\">\n            <dl className=\"movie-page-info\">\n              <dt>Director:</dt>\n              <dd>{movieDescription.Director}</dd>\n              <dt>Actors:</dt>\n              <dd>{movieDescription.Actors}</dd>\n              <dt>Awards:</dt>\n              <dd>{movieDescription.Awards}</dd>\n              <dt>Country:</dt>\n              <dd>{movieDescription.Country}</dd>\n              <dt>Genre:</dt>\n              <dd>{movieDescription.Genre}</dd>\n              <dt>Rating imdb:</dt>\n              <dd>{movieDescription.imdbRating}</dd>\n              <dt>Runtime:</dt>\n              <dd>{movieDescription.Runtime}</dd>\n            </dl>\n            <p>\n              {movieDescription.Plot}\n            </p>\n          </main>\n        </section>}\n        </section>\n\n    }\n\n  </article>\n}\n\nexport default Movie;\n","import React from \"react\";\nimport BackButton from \"../../components/BackButton/BackButton\";\nimport './NotFound.scss'\n\nconst NotFound = () => {\n  return <section className=\"container not-found dark-background\">\n    <p className=\"not-found-info\">\n      Unfortunately we cannot find page which you are looking for.\n      Please use Back button to go to search page</p>\n    <BackButton/>\n  </section>\n}\n\nexport default NotFound;","import React, {useState} from 'react';\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.scss';\nimport SearchPage from \"./pages/SearchPage/SearchPage\";\nimport MovieList from \"./pages/MovieList/MovieList\";\nimport Movie from \"./pages/Movie/Movie\";\nimport NotFound from \"./pages/NotFound/NotFound\";\n\nimport {MovieProvider} from \"./context/movieContext\";\n\nconst App = () => {\n  const [movies, setMovies] = useState({});\n  const [details, setDetails] = useState({})\n  const updateMovies = (movies) => {\n    setMovies(movies);\n  }\n  const updateDetails = (details) => {\n    setDetails(details);\n  }\n\n  return <MovieProvider value={{\n    movies,\n    details,\n    updateMovies,\n    updateDetails\n  }}>\n    <Switch>\n      <Route exact={true} path=\"/movie-list/:title/:year?\"><MovieList/></Route>\n      <Route exact={true} path=\"/movie/:movieId\"><Movie/></Route>\n      <Route exact={true} path=\"/\"> <SearchPage/> </Route>\n      <Route exact={true} path=\"*\"> <NotFound/> </Route>\n    </Switch>\n  </MovieProvider>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router basename={process.env.PUBLIC_URL}>\n          <App />\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}